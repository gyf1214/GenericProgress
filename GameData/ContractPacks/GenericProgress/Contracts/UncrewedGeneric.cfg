// Unmanned Reach for @targetBody (ReachFor)
CONTRACT_TYPE
{
    name = ReachFor
    group = GenericProgress
    agent = Generic Progress Inc.
    sortKey = 010

    title = Reach for @targetBody (Uncrewed)
    description = Our current achievements indicate that we have the ability to reach @targetBody. Send a probe to collect science.
    completedMessage = Our probe have successfully collected science in the SOI of @targetBody.
    synopsis = We want to collect science in the SOI of @targetBody.

    minExpiry = 0
    maxExpiry = 0
    maxCompletions = 1
    cancellable = true
    declinable = false

    prestige = Trivial

    rewardScience = @GenericProgress:BaseScience
    rewardReputation = @GenericProgress:BaseReputation
    rewardFunds = @GenericProgress:BaseFund * 2
    advanceFunds = @GenericProgress:BaseFund
    failureReputation = @GenericProgress:FailReputation
    failureFunds = @advanceFunds * 2


    targetBody = @Target

    DATA_EXPAND
    {
        type = CelestialBody
        Target = AllBodies().Where(cb => !cb.IsSun() && !cb.IsHomeWorld())
    }

    DATA
    {
        // tricky
        type = List<CelestialBody>
        TargetList = $GP_Enabled
        title = Must have orbited the home world
    }

    REQUIREMENT
    {
        name = CheckEnabled
        type = Expression

        expression = @/TargetList.Contains(@/targetBody)
        title = Must have explored nearby celestial bodies
    }

    PARAMETER
    {
        name = Vessel
        type = VesselParameterGroup

        PARAMETER
        {
            name = HasCrew
            type = HasCrew

            minCrew = 0
            maxCrew = 0
        }

        PARAMETER
        {
            name = CollectScience
            type = CollectScience

            situation = InSpaceHigh
            recoveryMethod = RecoverOrTransmit
        }
    }

    BEHAVIOUR
    {
        name = EnablePlanet
        type = Expression

        CONTRACT_COMPLETED_SUCCESS
        {
            type = List<CelestialBody>

            GP_Reached = $GP_Reached.Concat([ @/targetBody ])
        }
    }
}

// Escape @EscapeTarget (Escape)
CONTRACT_TYPE
{
    name = Escape
    group = GenericProgress
    agent = Generic Progress Inc.
    sortKey = 011

    title = Escape @EscapeTarget
    description = To go further in space, we need to escape the influence of @EscapeTarget. We want to know if we have the ability.
    completedMessage = Our vessel have successfully escape @EscapeTarget to @targetBody.
    synopsis = We want to escape @EscapeTarget and reach an orbit of @targetBody.

    minExpiry = 0
    maxExpiry = 0
    maxCompletions = 1
    cancellable = true
    declinable = false

    prestige = Significant

    rewardScience = 0.0
    rewardReputation = @GenericProgress:BaseReputation
    rewardFunds = @GenericProgress:BaseFund
    advanceFunds = @GenericProgress:BaseFund / 2
    failureReputation = @GenericProgress:FailReputation
    failureFunds = @advanceFunds * 2

    targetBody = @EscapeTarget.Parent()

    DATA_EXPAND
    {
        type = CelestialBody
        EscapeTarget = AllBodies().Where(cb => !cb.IsSun())
    }

    DATA
    {
        // tricky
        type = List<CelestialBody>
        TargetList = $GP_ToEscape
        title = Must have orbited the home world
    }

    DATA
    {
        type = List<CelestialBody>
        requiredValue = false

        InnerPlanets = @/targetBody.Children().Where(cb => cb.SemiMajorAxis() < @/EscapeTarget.SemiMajorAxis())
        OuterPlanets = @/targetBody.Children().Where(cb => cb.SemiMajorAxis() > @/EscapeTarget.SemiMajorAxis())


        // tricky since empty list syntax is not allowed
        NextInner = @InnerPlanets.Count() > 0 ? [ @InnerPlanets.Last() ] : [ HomeWorld() ]
        NextOuter = @OuterPlanets.Count() > 0 ? [ @OuterPlanets.First() ] : [ HomeWorld() ]
    }

    REQUIREMENT
    {
        name = CheckEnabled
        type = Expression

        expression = @/TargetList.Contains(@/EscapeTarget)
        title = Must have escaped from home world to the target
    }

    PARAMETER
    {
        name = Vessel
        type = VesselParameterGroup

        PARAMETER
        {
            name = Orbit
            type = Orbit
            disableOnStateChange = true

            minAltitude = @/targetBody.SpaceAltitudeThreshold()
        }
    }

    BEHAVIOUR
    {
        name = EnablePlanet
        type = Expression

        CONTRACT_COMPLETED_SUCCESS
        {
            type = List<CelestialBody>

            GP_ToEscape = $GP_ToEscape.Concat([ @/targetBody ])
            GP_Reached = $GP_Reached.Concat([ @/targetBody ])
            GP_Enabled = $GP_Enabled.ExcludeAll(@/NextInner).Concat(@/NextInner).ExcludeAll(@/NextOuter).Concat(@/NextOuter)
        }
    }
}

// Unmanned Orbit of @targetBody (Orbit)
CONTRACT_TYPE
{
    name = Orbit
    group = GenericProgress
    agent = Generic Progress Inc.
    sortKey = 012

    title = Orbit @targetBody (Uncrewed)
    description = To prepare for our further research of @targetBody, we need to send a permanent probe and get close enough. Since no one will take the risks, this will be an unmanned mission.
    completedMessage = Our probe have successfully entered the orbit of @targetBody.
    synopsis = We want to launch a probe and enter a low orbit of @targetBody.

    minExpiry = 0
    maxExpiry = 0
    maxCompletions = 1
    cancellable = true
    declinable = false

    prestige = Significant

    rewardScience = 0.0
    rewardReputation = @GenericProgress:BaseReputation * 2
    rewardFunds = @GenericProgress:BaseFund
    advanceFunds = @GenericProgress:BaseFund
    failureReputation = @GenericProgress:FailReputation
    failureFunds = @advanceFunds * 2

    targetBody = @Target

    DATA_EXPAND
    {
        type = CelestialBody
        Target = AllBodies().Where(cb => !cb.IsHomeWorld())
    }

    DATA
    {
        // tricky
        type = List<CelestialBody>
        TargetList = $GP_Reached
        title = Must have orbited the home world
    }

    DATA
    {
        type = List<CelestialBody>
        requiredValue = false

        InnerPlanets = @/targetBody.Parent().Children().Where(cb => cb.SemiMajorAxis() < @/targetBody.SemiMajorAxis())
        OuterPlanets = @/targetBody.Parent().Children().Where(cb => cb.SemiMajorAxis() > @/targetBody.SemiMajorAxis())

        // tricky since empty list syntax is not allowed
        NextInner = @InnerPlanets.Count() > 0 ? [ @InnerPlanets.Last() ] : [ HomeWorld() ]
        NextOuter = @OuterPlanets.Count() > 0 ? [ @OuterPlanets.First() ] : [ HomeWorld() ]
        NextChildren = @/targetBody.Children().Count() > 0 ? @/targetBody.Children() : [ HomeWorld() ]
    }

    REQUIREMENT
    {
        name = CheckEnabled
        type = Expression

        expression = @/TargetList.Contains(@/targetBody)
        title = Must have reached for the target
    }

    PARAMETER
    {
        name = Vessel
        type = VesselParameterGroup

        PARAMETER
        {
            name = HasCrew
            type = HasCrew

            minCrew = 0
            maxCrew = 0
        }

        PARAMETER
        {
            name = Orbit
            type = Orbit
            disableOnStateChange = true

            maxAltitude = @/targetBody.SpaceAltitudeThreshold()
        }
    }

    BEHAVIOUR
    {
        name = EnablePlanet
        type = Expression

        CONTRACT_COMPLETED_SUCCESS
        {
            type = List<CelestialBody>

            GP_Enabled = $GP_Enabled.ExcludeAll(@/NextInner).Concat(@/NextInner).ExcludeAll(@/NextOuter).Concat(@/NextOuter).ExcludeAll(@/NextChildren).Concat(@/NextChildren).ExcludeAll($GP_ToEscape)

            GP_Orbited = $GP_Orbited.Concat([ @/targetBody ])
        }
    }
}

// Unmanned Land on @targetBody (Orbit)
CONTRACT_TYPE
{
    name = Land
    group = GenericProgress
    agent = Generic Progress Inc.
    sortKey = 013

    title = Land on @targetBody (Uncrewed)
    description = We will not stop at the orbit of @targetBody, but consider to arrive directly. The mission could be dangerous since we do not know much about its surface.
    completedMessage = Our probe have successfully landed on @targetBody.
    synopsis = We want to launch a probe, land on @targetBody and collect science.

    minExpiry = 0
    maxExpiry = 0
    maxCompletions = 1
    cancellable = true
    declinable = false

    prestige = Significant

    rewardScience = @GenericProgress:BaseScience * 2
    rewardReputation = @GenericProgress:BaseReputation
    rewardFunds = @GenericProgress:BaseFund * 2
    advanceFunds = @GenericProgress:BaseFund
    failureReputation = @GenericProgress:FailReputation
    failureFunds = @advanceFunds * 2

    targetBody = @Target

    DATA_EXPAND
    {
        type = CelestialBody
        Target = AllBodies().Where(cb => !cb.IsHomeWorld() && cb.HasSurface())
    }

    DATA
    {
        // tricky
        type = List<CelestialBody>
        TargetList = $GP_Orbited
        title = Must have orbited the home world
    }

    REQUIREMENT
    {
        name = CheckEnabled
        type = Expression

        expression = @/TargetList.Contains(@/targetBody)
        title = Must have orbited the target
    }

    PARAMETER
    {
        name = Vessel
        type = VesselParameterGroup

        PARAMETER
        {
            name = HasCrew
            type = HasCrew

            minCrew = 0
            maxCrew = 0
        }

        PARAMETER
        {
            name = CollectScience
            type = CollectScience

            location = Surface
            recoveryMethod = RecoverOrTransmit
        }
    }

    BEHAVIOUR
    {
        name = EnablePlanet
        type = Expression

        CONTRACT_COMPLETED_SUCCESS
        {
            type = List<CelestialBody>

            GP_Landed = $GP_Landed.Concat([ @/targetBody ])
        }
    }
}
