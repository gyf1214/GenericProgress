CONTRACT_TYPE
{
    name = Escape
    group = GenericProgress
    agent = Generic Progress Inc.

    title = Escape @EscapeTarget
    description = To go further in space, we need to escape the influence of @EscapeTarget. We need to know if we have the ability.
    completedMessage = Your vessel have successfully escape @EscapeTarget to @targetBody.
    synopsis = We want to escape @EscapeTarget and reach an orbit of @targetBody.

    minExpiry = 0
    maxExpiry = 0
    maxCompletions = 1
    cancellable = true
    declinable = false

    prestige = Significant

    rewardScience = @GenericProgress:BaseScience * 2
    rewardReputation = @GenericProgress:BaseReputation * 6
    rewardFunds = @GenericProgress:BaseFund * 2
    advanceFunds = @GenericProgress:BaseFund
    failureReputation = @GenericProgress:FailReputation
    failureFunds = @advanceFunds * 2

    targetBody = @EscapeTarget.Parent()

    DATA_EXPAND
    {
        type = CelestialBody
        EscapeTarget = AllBodies().Where(cb => !cb.IsSun())
    }

    DATA
    {
        // tricky
        type = List<CelestialBody>
        TargetList = $GP_ToEscape
        title = Must have orbited the home world
    }

    DATA
    {
        type = List<CelestialBody>
        requiredValue = false

        InnerPlanets = @/targetBody.Children().Where(cb => cb.SemiMajorAxis() < @/EscapeTarget.SemiMajorAxis())
        OuterPlanets = @/targetBody.Children().Where(cb => cb.SemiMajorAxis() > @/EscapeTarget.SemiMajorAxis())


        // tricky since empty list syntax is not allowed
        NextInner = @InnerPlanets.Count() > 0 ? [ @InnerPlanets.Last() ] : [ HomeWorld() ]
        NextOuter = @OuterPlanets.Count() > 0 ? [ @OuterPlanets.First() ] : [ HomeWorld() ]
    }

    REQUIREMENT
    {
        name = CheckEnabled
        type = Expression

        expression = @/TargetList.Contains(@/EscapeTarget)
        title = Must have escaped from home world to the target
    }

    PARAMETER
    {
        name = Vessel
        type = VesselParameterGroup

        PARAMETER
        {
            name = NewVessel
            type = NewVessel
        }

        PARAMETER
        {
            name = Orbit
            type = Orbit
            disableOnStateChange = true

            minAltitude = @/targetBody.SpaceAltitudeThreshold()
        }
    }

    BEHAVIOUR
    {
        name = EnablePlanet
        type = Expression

        CONTRACT_COMPLETED_SUCCESS
        {
            type = List<CelestialBody>

            GP_ToEscape = $GP_ToEscape.Concat([ @/targetBody ])
            GP_Reached = $GP_Reached.Concat([ @/targetBody ])
            GP_Enabled = $GP_Enabled.ExcludeAll(@/NextInner).Concat(@/NextInner).ExcludeAll(@/NextOuter).Concat(@/NextOuter)
        }
    }
}
