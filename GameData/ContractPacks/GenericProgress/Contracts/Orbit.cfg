CONTRACT_TYPE
{
    name = Orbit
    group = GenericProgress
    agent = Generic Progress Inc.

    title = Orbit @targetBody (Uncrewed)
    description = To prepare for our further research of @targetBody, we need to send a permanent probe and get close enough. Since no one will take the risks, this will be an unmanned mission.
    completedMessage = Your probe have successfully enter the orbit of @targetBody.
    synopsis = We want to enter a low orbit of @targetBody.

    minExpiry = 0
    maxExpiry = 0
    maxCompletions = 1
    cancellable = true
    declinable = false

    prestige = Significant

    rewardScience = @GenericProgress:BaseScience * 2
    rewardReputation = @GenericProgress:BaseReputation * 6
    rewardFunds = @GenericProgress:BaseFund * 2
    advanceFunds = @GenericProgress:BaseFund
    failureReputation = @GenericProgress:FailReputation
    failureFunds = @advanceFunds * 2

    targetBody = @Target

    DATA_EXPAND
    {
        type = CelestialBody
        Target = AllBodies().Where(cb => !cb.IsHomeWorld())
    }

    DATA
    {
        // tricky
        type = List<CelestialBody>
        TargetList = $GP_Reached
        title = Must have orbited the home world
    }

    DATA
    {
        type = List<CelestialBody>
        requiredValue = false

        InnerPlanets = @/targetBody.Parent().Children().Where(cb => cb.SemiMajorAxis() < @/targetBody.SemiMajorAxis())
        OuterPlanets = @/targetBody.Parent().Children().Where(cb => cb.SemiMajorAxis() > @/targetBody.SemiMajorAxis())

        // tricky since empty list syntax is not allowed
        NextInner = @InnerPlanets.Count() > 0 ? [ @InnerPlanets.Last() ] : [ HomeWorld() ]
        NextOuter = @OuterPlanets.Count() > 0 ? [ @OuterPlanets.First() ] : [ HomeWorld() ]
        NextChildren = @/targetBody.Children().Count() > 0 ? @/targetBody.Children() : [ HomeWorld() ]
    }

    REQUIREMENT
    {
        name = CheckEnabled
        type = Expression

        expression = @/TargetList.Contains(@/targetBody)
        title = Must have reached for the target
    }

    PARAMETER
    {
        name = Vessel
        type = VesselParameterGroup

        PARAMETER
        {
            name = NewVessel
            type = NewVessel
        }

        PARAMETER
        {
            name = Orbit
            type = Orbit
            disableOnStateChange = true

            maxAltitude = @/targetBody.SpaceAltitudeThreshold()
        }
    }

    BEHAVIOUR
    {
        name = EnablePlanet
        type = Expression

        CONTRACT_COMPLETED_SUCCESS
        {
            type = List<CelestialBody>

            GP_Enabled = $GP_Enabled.ExcludeAll(@/NextInner).Concat(@/NextInner).ExcludeAll(@/NextOuter).Concat(@/NextOuter).ExcludeAll(@/NextChildren).Concat(@/NextChildren).ExcludeAll($GP_ToEscape)
        }
    }
}
