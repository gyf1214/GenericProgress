// First Flight (FirstFlight)
CONTRACT_TYPE
{
    name = FirstFlight
    group = GenericProgress
    agent = Generic Progress Inc.
    sortKey = 000

    title = First Flight!
    description = Greetings! Pleasure to have you in our space journey. It is time to launch our first vessel.
    completedMessage = We have successfully launched our first vessel.
    synopsis = We want to launch a vessel and get to above 1 km.

    minExpiry = 0
    maxExpiry = 0
    maxCompletions = 1
    cancellable = true
    declinable = false

    prestige = Trivial

    rewardScience = @GenericProgress:BaseScience
    rewardReputation = @GenericProgress:BaseReputation
    rewardFunds = @GenericProgress:BaseFund / 2
    failureReputation = @GenericProgress:FailReputation
    advanceFunds = @GenericProgress:BaseFund / 2
    failureFunds = @advanceFunds * 2

    targetBody = HomeWorld()

    PARAMETER
    {
        name = Vessel
        type = VesselParameterGroup

        PARAMETER
        {
            name = NewVessel
            type = NewVessel
        }

        PARAMETER
        {
            name = ReachState
            type = ReachState

            minAltitude = 1000
            situation = FLYING
            disableOnStateChange = true
        }
    }
}

// Reach Upper Atmosphere (UpperAtm)
CONTRACT_TYPE
{
    name = UpperAtm
    group = GenericProgress
    agent = Generic Progress Inc.
    sortKey = 001

    title = Reach Upper Atmosphere
    description = We have never thought what the environment is like in very high altitude. Send a vessel to explore.
    completedMessage = We have successfully collect science in upper atmosphere.
    synopsis = We want to launch a vessel and collect science above @/minAlt km.

    minExpiry = 0
    maxExpiry = 0
    maxCompletions = 1
    cancellable = true
    declinable = false

    prestige = Trivial

    rewardScience = @GenericProgress:BaseScience * 3
    rewardReputation = @GenericProgress:BaseReputation
    rewardFunds = @GenericProgress:BaseFund
    failureReputation = @GenericProgress:FailReputation
    advanceFunds = @GenericProgress:BaseFund / 2
    failureFunds = @advanceFunds * 2

    targetBody = HomeWorld()

    DATA
    {
        type = double
        minAlt = HomeWorld().FlyingAltitudeThreshold() / 1000
        title = Have Atmosphere
    }

    REQUIREMENT
    {
        name = Contract
        type = CompleteContract
        contractType = FirstFlight
    }

    PARAMETER
    {
        name = Vessel
        type = VesselParameterGroup

        PARAMETER
        {
            name = NewVessel
            type = NewVessel
        }

        PARAMETER
        {
            name = CollectScience
            type = CollectScience

            situation = FlyingHigh
            recoveryMethod = RecoverOrTransmit
        }
    }
}

// Escape Atmosphere (EscapeAtm)
CONTRACT_TYPE
{
    name = EscapeAtm
    group = GenericProgress
    agent = Generic Progress Inc.
    sortKey = 002

    title = Escape Atmosphere (Uncrewed)
    description = To explore the space, we must first break the limit of the atmosphere. Launch a vessel to test our ability. An unmanned one is required to avoid the risks.
    completedMessage = We have successfully escape the atmosphere.
    synopsis = We want to get above @/minAlt km.

    minExpiry = 0
    maxExpiry = 0
    maxCompletions = 1
    cancellable = true
    declinable = false

    prestige = Trivial

    rewardScience = 0.0
    rewardReputation = @GenericProgress:BaseReputation * 4
    rewardFunds = @GenericProgress:BaseFund
    failureReputation = @GenericProgress:FailReputation
    advanceFunds = @GenericProgress:BaseFund
    failureFunds = @advanceFunds * 2

    targetBody = HomeWorld()

    DATA
    {
        type = double
        minAlt = HomeWorld().AtmosphereAltitude() / 1000
        title = Have Atmosphere
    }

    REQUIREMENT
    {
        name = Contract
        type = CompleteContract
        contractType = FirstFlight
    }

    PARAMETER
    {
        name = Vessel
        type = VesselParameterGroup

        PARAMETER
        {
            name = NewVessel
            type = NewVessel
        }

        PARAMETER
        {
            name = HasCrew
            type = HasCrew

            minCrew = 0
            maxCrew = 0
        }

        PARAMETER
        {
            name = ReachState
            type = ReachState

            situation = SUB_ORBITAL
            disableOnStateChange = true
        }
    }
}

// Orbit (OrbitHome)
CONTRACT_TYPE
{
    name = OrbitHome
    group = GenericProgress
    agent = Generic Progress Inc.
    sortKey = 003

    title = Orbit @targetBody (Uncrewed)
    description = Each vessel we have launched just falls back to the planet. However, since we have escaped the atmosphere, our vessel will stay in space when it gains sufficient velocity. Launch a vessel to prove this. It will be an unmanned mission since we do not care about recovery.
    completedMessage = We have successfully get into an orbit of @targetBody.
    synopsis = We want to get into an orbit of @targetBody.

    minExpiry = 0
    maxExpiry = 0
    maxCompletions = 1
    cancellable = true
    declinable = false

    prestige = Significant

    rewardScience = @GenericProgress:BaseScience * 4
    rewardReputation = @GenericProgress:BaseReputation * 8
    rewardFunds = @GenericProgress:BaseFund * 2
    failureReputation = @GenericProgress:FailReputation
    advanceFunds = @GenericProgress:BaseFund
    failureFunds = @advanceFunds * 2

    targetBody = HomeWorld()

    REQUIREMENT
    {
        name = Contract1
        type = CompleteContract

        contractType = UpperAtm
    }

    REQUIREMENT
    {
        name = Contract2
        type = CompleteContract

        contractType = EscapeAtm
    }

    PARAMETER
    {
        name = Vessel
        type = VesselParameterGroup

        PARAMETER
        {
            name = NewVessel
            type = NewVessel
        }

        PARAMETER
        {
            name = HasCrew
            type = HasCrew

            minCrew = 0
            maxCrew = 0
        }

        PARAMETER
        {
            name = Orbit
            type = Orbit
            disableOnStateChange = true

            minAltitude = @/targetBody.AtmosphereAltitude()
        }
    }

    BEHAVIOUR
    {
        name = Expression
        type = Expression

        CONTRACT_COMPLETED_SUCCESS
        {
            type = List<CelestialBody>

            GP_Enabled = @/targetBody.Children()
            GP_ToEscape = [ @/targetBody ]
            // tricky
            GP_Reached = [ @/targetBody ]
            GP_Orbited = [ @/targetBody ]
            GP_Landed = [ @/targetBody ]
            GP_Manned = [ @/targetBody ]
        }
    }
}
