// Manned Orbit of @targetBody (Orbit)
CONTRACT_TYPE
{
    name = MannedOrbit
    group = GenericProgress
    agent = Generic Progress Inc.
    sortKey = 013

    title = Orbit @targetBody (Crewed)
    description = It is exciting to send our astronaut to a new planet! Although we have sufficient knowledge of it, this will still be a challenging mission.
    completedMessage = Our astronaut have successfully entered the orbit of @/targetBody and returned.
    synopsis = We want to launch a manned vessel, enter the low orbit of @/targetBody and return.

    minExpiry = 0
    maxExpiry = 0
    maxCompletions = 1
    cancellable = true
    declinable = false

    prestige = Significant

    rewardScience = 0.0
    rewardReputation = @GenericProgress:BaseReputation * 2
    rewardFunds = @GenericProgress:BaseFund * 2
    advanceFunds = @GenericProgress:BaseFund
    failureReputation = @GenericProgress:FailReputation
    failureFunds = @advanceFunds * 2

    targetBody = @Target

    DATA_EXPAND
    {
        type = CelestialBody
        Target = AllBodies().Where(cb => !cb.IsHomeWorld())
    }

    DATA
    {
        // tricky
        type = List<CelestialBody>
        TargetList = $GP_Orbited
        title = Must have orbited the home world
    }

    REQUIREMENT
    {
        name = CompleteContract
        type = CompleteContract

        contractType = MannedOrbitHome
    }

    REQUIREMENT
    {
        name = CheckEnabled
        type = Expression

        expression = @/TargetList.Contains(@/targetBody)
        title = Must have orbited the target
    }

    PARAMETER
    {
        name = Vessel
        type = VesselParameterGroup

        PARAMETER
        {
            name = HasCrew
            type = HasCrew

            minCrew = 1
        }

        PARAMETER
        {
            name = Orbit
            type = Orbit
            disableOnStateChange = true

            maxAltitude = @/targetBody.SpaceAltitudeThreshold()
        }

        PARAMETER
        {
            name = ReturnHome
            type = ReturnHome

            completeInSequence = true
        }
    }

    BEHAVIOUR
    {
        name = EnablePlanet
        type = Expression

        CONTRACT_COMPLETED_SUCCESS
        {
            type = List<CelestialBody>

            GP_Manned = $GP_Manned.Concat([ @/targetBody ])
        }
    }
}

// Manned Land on @targetBody (Orbit)
CONTRACT_TYPE
{
    name = MannedLand
    group = GenericProgress
    agent = Generic Progress Inc.
    sortKey = 014

    title = Land on @targetBody (Crewed)
    description = Here comes the most exciting part! We are going to send astronaut to the surface of @/targetBody. Since we have to consider everything and safely recover our brave astronaut, it will be much more difficult.
    completedMessage = Our astronaut have successfully land on @/targetBody and returned.
    synopsis = We want to launch a manned vessel, land on @/targetBody and return.

    minExpiry = 0
    maxExpiry = 0
    maxCompletions = 1
    cancellable = true
    declinable = false

    prestige = Exceptional

    rewardScience = @GenericProgress:BaseScience * 2
    rewardReputation = @GenericProgress:BaseReputation * 3
    rewardFunds = @GenericProgress:BaseFund * 3
    advanceFunds = @GenericProgress:BaseFund * 1.5
    failureReputation = @GenericProgress:FailReputation
    failureFunds = @advanceFunds * 2

    targetBody = @Target

    DATA_EXPAND
    {
        type = CelestialBody
        Target = AllBodies().Where(cb => !cb.IsHomeWorld() && cb.HasSurface())
    }

    DATA
    {
        // tricky
        type = List<CelestialBody>
        TargetList1 = $GP_Landed
        title = Must have orbited the home world
    }

    DATA
    {
        // tricky
        type = List<CelestialBody>
        TargetList2 = $GP_Manned
        hidden = true
    }

    REQUIREMENT
    {
        name = CheckEnabled
        type = Expression

        expression = @/TargetList1.Contains(@/targetBody)
        title = Must have orbited the target with crew
    }

    REQUIREMENT
    {
        name = CheckEnabled
        type = Expression

        expression = @/TargetList2.Contains(@/targetBody)
        title = Must have landed on target
    }

    REQUIREMENT
    {
        name = Contract
        type = CompleteContract

        contractType = CrewEVA
    }

    PARAMETER
    {
        name = Vessel
        type = VesselParameterGroup

        PARAMETER
        {
            name = HasCrew
            type = HasCrew

            minCrew = 1
        }

        PARAMETER
        {
            name = PlantFlag
            type = PlantFlag
        }

        PARAMETER
        {
            name = ReturnHome
            type = ReturnHome

            completeInSequence = true
        }
    }
}
